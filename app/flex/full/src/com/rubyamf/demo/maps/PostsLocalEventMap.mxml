<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2011    Mark W. Foster    www.fosrias.com
//  All Rights Reserved.
//
//  NOTICE: Mark W. Foster permits you to use, modify, and distribute this file
//  in accordance with the terms of the MIT license agreement accompanying it.
//
////////////////////////////////////////////////////////////////////////////////
-->
<LocalEventMap 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns="http://mate.asfusion.com/"
	xmlns:business="com.rubyamf.demo.business.*"
    cache="global">
    
    <!-- Script ____________________________________________________________ -->
<fx:Script>
<![CDATA[
	import com.fosrias.library.business.RemoteService;
	import com.rubyamf.demo.events.PayloadEvent;
	import com.rubyamf.demo.managers.MainManager;
	import com.rubyamf.demo.managers.PostsManager;
	import com.rubyamf.demo.views.PostsUI;
	import com.rubyamf.demo.views.models.PostsViewModel;
	
	import mx.events.FlexEvent;
	import mx.rpc.events.FaultEvent;
	import mx.rpc.events.ResultEvent;
]]>
</fx:Script>
	
<fx:Declarations>
	
    <!-- Services __________________________________________________________ -->
    <business:Services id="services"/>
    
    <!-- FlexEvent.PREINITIALIZE ___________________________________________ --> 
    <EventHandlers type="{FlexEvent.PREINITIALIZE}" debug="true">
		<ObjectBuilder generator="{PostsManager}">
            <Properties dispatcher="{scope.dispatcher}"/>
        </ObjectBuilder>
		<ObjectBuilder generator="{MainManager}"/>
    </EventHandlers> 
	
	<!-- PayloadEvent.CALL _________________________________________________ -->   
	<EventHandlers type="{PayloadEvent.CALL}" debug="true">
		<AsyncMethodInvoker generator="{RemoteService}"
							method="call"
							cache="local"
							arguments="{event.data}"
							successType="{ResultEvent.RESULT}"
							faultType="{FaultEvent.FAULT}" 
							debug="true">
			<Properties service="{services.postsService}"/>
			<Properties showBusyCursor="{true}"/>
			<successHandlers>
				<MethodInvoker generator="{PostsManager}"
							   method="callResult"
							   arguments="{currentEvent}"/>
			</successHandlers>
			<faultHandlers >
				<MethodInvoker generator="{PostsManager}"
							   method="callFault" 
							   arguments="{currentEvent}"/>
			</faultHandlers>
		</AsyncMethodInvoker>
	</EventHandlers>
	
    <!-- PayloadEventType.EXECUTE __________________________________________ -->   
    <EventHandlers type="{PayloadEvent.EXECUTE}" debug="true" priority="2">
        <MethodInvoker generator="{PostsManager}"
                       method="execute"
                       arguments="{event}"/>
    </EventHandlers>
	
	<!-- PayloadEventType.SHOW_BLOG ________________________________________ -->   
	<EventHandlers type="{PayloadEvent.SHOW_BLOG}" debug="true"
				   dispatcherType="global">
		<MethodInvoker generator="{PostsManager}"
					   method="showBlog"
					   arguments="{event}"/>
	</EventHandlers>

	<!-- PayloadEvent.SHOW_POST ____________________________________________ -->   
	<EventHandlers type="{PayloadEvent.SHOW_POST}" debug="true"
				   dispatcherType="global">
		<MethodInvoker generator="{PostsManager}"
					   method="showPost"
					   arguments="{event}"/>
	</EventHandlers>
	
	<!-- View Injectors ____________________________________________________ -->
    <Injectors target="{PostsUI}" debug="true">
        <ObjectBuilder generator="{PostsViewModel}"  
                       registerTarget="true"/>
        <PropertyInjector targetKey="model" 
                          source="{lastReturn}"/>
    </Injectors>
	
	<!-- View Model Injectors ______________________________________________ -->
	<Injectors target="{PostsViewModel}" debug="true">
        <PropertyInjector targetKey="dispatcher"
						  source="{scope.dispatcher}"/>
		
		<PropertyInjector targetKey="hasEditLock"
						  source="{MainManager}"
						  sourceKey="modelHasEditLock"/>
		
		<PropertyInjector targetKey="action"
						  source="{PostsManager}"
						  sourceKey="modelAction"/>
		<PropertyInjector targetKey="isDirty"
						  source="{PostsManager}"
						  sourceKey="modelIsDirty"/>
		<PropertyInjector targetKey="isEditable"
						  source="{PostsManager}"
						  sourceKey="modelIsEditable"/>
		<PropertyInjector targetKey="posts"
						  source="{PostsManager}"
						  sourceKey="modelPosts"/>
		<PropertyInjector targetKey="selectedPost"
						  source="{PostsManager}"
						  sourceKey="modelSelectedPost"/>
		<PropertyInjector targetKey="viewIndex"
						  source="{PostsManager}"
						  sourceKey="modelViewIndex"/>
    </Injectors> 
</fx:Declarations>
	
</LocalEventMap>